{
  "platform": "windows",
  "queries": {
    "Bitlocker_Encryption_Settings_Registry_Misconfigured": {
      "query": "SELECT * FROM registry WHERE (path='HKEY_LOCAL_MACHINE\\Software\\Policies\\Microsoft\\FVE\\MDOPBitLockerManagement\\ShouldEncryptOSDrive' OR path='HKEY_LOCAL_MACHINE\\Software\\Policies\\Microsoft\\FVE\\MDOPBitLockerManagement\\OSDriveProtector') AND data!=1;",
      "interval": 3600,
      "description": "Returns the content of the key if it does not match the expected value",
      "platform": "windows"
    },
    "Bitlocker_MBAM_Endpoint_Registry_Misconfigured": {
      "query": "SELECT * FROM registry WHERE path='HKEY_LOCAL_MACHINE\\Software\\Policies\\Microsoft\\FVE\\MDOPBitLockerManagement\\KeyRecoveryServiceEndPoint' AND data!='https://mbam.server.com/MBAMRecoveryAndHardwareService/CoreService.svc';",
      "interval": 3600,
      "description": "Returns the content of the key if it does not match the expected value",
      "platform": "windows"
    },
    "Bitlocker_MBAM_Registry_Misconfigured": {
      "query": "SELECT * FROM registry WHERE path='HKEY_LOCAL_MACHINE\\Software\\Policies\\Microsoft\\FVE\\MDOPBitLockerManagement\\UseMBAMServices' AND data!=1;",
      "interval": 3600,
      "description": "Returns the content of the key if it does not match the expected value",
      "platform": "windows"
    },
    "Command_Line_Auditing_Registry_Misconfigured": {
      "query": "SELECT * FROM registry WHERE path='HKEY_LOCAL_MACHINE\\Software\\Microsoft\\Windows\\CurrentVersion\\Policies\\System\\Audit\\ProcessCreationIncludeCmdLine_Enabled' AND data!=1;",
      "interval": 3600,
      "description": "Returns the content of the key if it does not match the expected value",
      "platform": "windows"
    },
    "Command_Line_Auditing_Registry_Missing": {
      "query": "SELECT IFNULL(key_count,0) AS key_exists FROM (SELECT COUNT(*) AS key_count FROM registry WHERE path='HKEY_LOCAL_MACHINE\\Software\\Microsoft\\Windows\\CurrentVersion\\Policies\\System\\Audit\\ProcessCreationIncludeCmdLine_Enabled') WHERE key_exists!=1;",
      "interval": 3600,
      "description": "Returns 0 as a result if the registry key does not exist",
      "platform": "windows"
    },
    "Crash_Dump_Registry_Misconfigured": {
      "query": "SELECT * FROM registry WHERE path='HKEY_LOCAL_MACHINE\\System\\CurrentControlSet\\Control\\CrashControl\\CrashDumpEnabled' AND data=0;",
      "interval": 3600,
      "description": "Returns the content of the key if it does not match the expected value",
      "platform": "windows"
    },
    "Crash_Dump_Registry_Missing": {
      "query": "SELECT IFNULL(key_count,0) AS key_exists FROM (SELECT COUNT(*) AS key_count FROM registry WHERE path='HKEY_LOCAL_MACHINE\\System\\CurrentControlSet\\Control\\CrashControl\\CrashDumpEnabled') WHERE key_exists!=1;",
      "interval": 3600,
      "description": "Returns 0 as a result if the registry key does not exist",
      "platform": "windows"
    },
    "DNS_Plugin_DLL_Registry_Exists": {
      "query": "SELECT * FROM registry WHERE key='HKEY_LOCAL_MACHINE\\SYSTEM\\CurrentControlSet\\services\\DNS\\Parameters\\ServerLevelPluginDll';",
      "interval": 3600,
      "description": "Returns the content of this key if it exists, which it shouldn't by default",
      "platform": "windows"
    },
    "Dr_Watson_Registry_Missing": {
      "query": "SELECT IFNULL(key_count,0) AS key_exists FROM (SELECT COUNT(*) AS key_count FROM registry where key='HKEY_LOCAL_MACHINE\\SOFTWARE\\Microsoft\\Windows NT\\CurrentVersion\\AeDebug') WHERE key_exists!=2;",
      "interval": 3600,
      "description": "Returns 0 as a result if the registry key does not exist",
      "platform": "windows"
    },
    "Error_Display_UI_Registry_Exists": {
      "query": "SELECT * FROM registry WHERE path='HKEY_LOCAL_MACHINE\\Software\\Microsoft\\PCHealth\\ErrorReporting\\ShowUI';",
      "interval": 3600,
      "description": "Returns the content of this key if it exists, which it shouldn't by default",
      "platform": "windows"
    },
    "Error_Mode_Registry_Misconfigured": {
      "query": "SELECT * FROM registry WHERE path='HKEY_LOCAL_MACHINE\\System\\CurrentControlSet\\Control\\Windows\\ErrorMode' AND data=2;",
      "interval": 3600,
      "description": "Returns the content of the key if it does not match the expected value",
      "platform": "windows"
    },
    "Error_Mode_Registry_Missing": {
      "query": "SELECT IFNULL(key_count,0) AS key_exists FROM (SELECT COUNT(*) AS key_count FROM registry WHERE path='HKEY_LOCAL_MACHINE\\System\\CurrentControlSet\\Control\\Windows\\ErrorMode') WHERE key_exists!=1;",
      "interval": 3600,
      "description": "Returns 0 as a result if the registry key does not exist",
      "platform": "windows"
    },
    "Log_Errors_Registry_Misconfigured": {
      "query": "SELECT * FROM registry WHERE path='HKEY_LOCAL_MACHINE\\System\\CurrentControlSet\\Control\\CrashControl\\LogEvent' AND data!=1;",
      "interval": 3600,
      "description": "Returns the content of the key if it does not match the expected value",
      "platform": "windows"
    },
    "Log_Errors_Registry_Missing": {
      "query": "SELECT IFNULL(key_count,0) AS key_exists FROM (SELECT COUNT(*) AS key_count FROM registry WHERE path='HKEY_LOCAL_MACHINE\\System\\CurrentControlSet\\Control\\CrashControl\\LogEvent') WHERE key_exists!=1;",
      "interval": 3600,
      "description": "Returns 0 as a result if the registry key does not exist",
      "platform": "windows"
    },
    "Per_User_TS_Session_Registry_Misconfigured": {
      "query": "SELECT * FROM registry WHERE path='HKEY_LOCAL_MACHINE\\SYSTEM\\CurrentControlSet\\Control\\Terminal Server\\fSingleSessionPerUser' AND data!=1;",
      "interval": 3600,
      "description": "Returns the content of the key if it does not match the expected value",
      "platform": "windows"
    },
    "Per_User_TS_Session_Registry_Missing": {
      "query": "SELECT IFNULL(key_count,0) AS key_exists FROM (SELECT COUNT(*) AS key_count FROM registry WHERE path='HKEY_LOCAL_MACHINE\\SYSTEM\\CurrentControlSet\\Control\\Terminal Server\\fSingleSessionPerUser') WHERE key_exists!=1;",
      "interval": 3600,
      "description": "Returns 0 as a result if the registry key does not exist",
      "platform": "windows"
    },
    "Powershell_InvocationHeader_Registry_Missing": {
      "query": "SELECT IFNULL(key_count,0) AS key_exists FROM (SELECT COUNT(*) AS key_count FROM registry WHERE path='HKEY_LOCAL_MACHINE\\Software\\Policies\\Microsoft\\Windows\\Powershell\\Transcription\\EnableInvocationHeader') WHERE key_exists!=1;",
      "interval": 3600,
      "description": "Returns 0 as a result if the registry key does not exist",
      "platform": "windows"
    },
    "Powershell_Logging_Registry_Misconfigured": {
      "query": "SELECT * FROM registry WHERE (path='HKEY_LOCAL_MACHINE\\Software\\Policies\\Microsoft\\Windows\\Powershell\\ModuleLogging\\EnableModuleLogging' OR path='HKEY_LOCAL_MACHINE\\Software\\Policies\\Microsoft\\Windows\\Powershell\\ScriptBlockLogging\\EnableScriptBlockLogging' OR path='HKEY_LOCAL_MACHINE\\Software\\Policies\\Microsoft\\Windows\\Powershell\\Transcription\\EnableTranscripting' OR path='HKEY_LOCAL_MACHINE\\Software\\Policies\\Microsoft\\Windows\\Powershell\\Transcription\\EnableInvocationHeader') AND data!=1;",
      "interval": 3600,
      "description": "Returns the content of the key if it does not match the expected value",
      "platform": "windows"
    },
    "Powershell_ModuleLogging_Registry_Missing": {
      "query": "SELECT IFNULL(key_count,0) AS key_exists FROM (SELECT COUNT(*) AS key_count FROM registry WHERE path='HKEY_LOCAL_MACHINE\\Software\\Policies\\Microsoft\\Windows\\Powershell\\ModuleLogging\\EnableModuleLogging') WHERE key_exists!=1;",
      "interval": 3600,
      "description": "Returns 0 as a result if the registry key does not exist",
      "platform": "windows"
    },
    "Powershell_ScriptBlockLogging_Registry_Missing": {
      "query": "SELECT IFNULL(key_count,0) AS key_exists FROM (SELECT COUNT(*) AS key_count FROM registry WHERE path='HKEY_LOCAL_MACHINE\\Software\\Policies\\Microsoft\\Windows\\Powershell\\ScriptBlockLogging\\EnableScriptBlockLogging') WHERE key_exists!=1;",
      "interval": 3600,
      "description": "Returns 0 as a result if the registry key does not exist",
      "platform": "windows"
    },
    "Powershell_TranscriptingLogging_Registry_Missing": {
      "query": "SELECT IFNULL(key_count,0) AS key_exists FROM (SELECT COUNT(*) AS key_count FROM registry WHERE path='HKEY_LOCAL_MACHINE\\Software\\Policies\\Microsoft\\Windows\\Powershell\\Transcription\\EnableTranscripting') WHERE key_exists!=1;",
      "interval": 3600,
      "description": "Returns 0 as a result if the registry key does not exist",
      "platform": "windows"
    },
    "SMBv1_Registry_Misconfigured": {
      "query": "SELECT * FROM registry WHERE path='HKEY_LOCAL_MACHINE\\SYSTEM\\CurrentControlSet\\Services\\LanmanServer\\Parameters\\SMB1' AND data!=0;",
      "interval": 3600,
      "description": "",
      "platform": "windows"
    },
    "SMBv1_Registry_Missing": {
      "query": "SELECT IFNULL(key_count,0) AS key_exists FROM (SELECT COUNT(*) AS key_count FROM registry WHERE path='HKEY_LOCAL_MACHINE\\SYSTEM\\CurrentControlSet\\Services\\LanmanServer\\Parameters\\SMB1') WHERE key_exists!=1;",
      "interval": 3600,
      "description": "Returns 0 as a result if the registry key does not exist",
      "platform": "windows"
    },
    "Send_Error_Alert_Registry_Exists": {
      "query": "SELECT * FROM registry WHERE key='HKEY_LOCAL_MACHINE\\System\\CurrentControlSet\\Control\\CrashControl\\SendAlert';",
      "interval": 3600,
      "description": "Returns the content of this key if it exists, which it shouldn't by default",
      "platform": "windows"
    },
    "Subscription_Manager_Registry_Misconfigured": {
      "query": "SELECT * FROM registry WHERE path='HKEY_LOCAL_MACHINE\\Software\\Policies\\Microsoft\\Windows\\EventLog\\EventForwarding\\SubscriptionManager\\1' AND (data!='Server=http://subdomain.domain.com:5985/wsman/SubscriptionManager/WEC' AND data!='Server=http://subdomain.domain.com:5985/wsman/SubscriptionManager/WEC');",
      "interval": 3600,
      "description": "Returns the content of the key if it does not match the expected value",
      "platform": "windows"
    },
    "Subscription_Manager_Registry_Missing": {
      "query": "SELECT IFNULL(key_count,0) AS key_exists FROM (SELECT COUNT(*) AS key_count FROM registry WHERE path='HKEY_LOCAL_MACHINE\\Software\\Policies\\Microsoft\\Windows\\EventLog\\EventForwarding\\SubscriptionManager\\1') WHERE key_exists!=1;",
      "interval": 3600,
      "description": "Returns 0 as a result if the registry key does not exist",
      "platform": "windows"
    },
    "WinRM_Settings_Registry_Misconfigured": {
      "query": "SELECT * FROM registry WHERE (path='HKEY_LOCAL_MACHINE\\Software\\Policies\\Microsoft\\Windows\\WinRM\\Client\\AllowBasic' OR path='HKEY_LOCAL_MACHINE\\Software\\Policies\\Microsoft\\Windows\\WinRM\\Client\\AllowCredSSP' OR path='HKEY_LOCAL_MACHINE\\Software\\Policies\\Microsoft\\Windows\\WinRM\\Client\\AllowUnencryptedTraffic' OR path='HKEY_LOCAL_MACHINE\\Software\\Policies\\Microsoft\\Windows\\WinRM\\Client\\AllowDigest' OR path='HKEY_LOCAL_MACHINE\\Software\\Policies\\Microsoft\\Windows\\WinRM\\Service\\AllowBasic' OR path='HKEY_LOCAL_MACHINE\\Software\\Policies\\Microsoft\\Windows\\WinRM\\Service\\AllowCredSSP' OR path='HKEY_LOCAL_MACHINE\\Software\\Policies\\Microsoft\\Windows\\WinRM\\Service\\AllowUnencryptedTraffic' OR path='HKEY_LOCAL_MACHINE\\Software\\Policies\\Microsoft\\Windows\\WinRM\\Service\\WinRS\\AllowRemoteShellAccess') AND data!=0; ",
      "interval": 3600,
      "description": "Returns the content of the key if it does not match the expected value",
      "platform": "windows"
    }
  }
}
