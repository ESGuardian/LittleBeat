input {
   file {
		tags => ["littlebeat_osquery"]
		path => "/var/log/doorman/osquery.log"
		sincedb_path => "/var/log/logstash/osquery.mark"
		start_position => "beginning"
		codec => json
   }
}


filter {
    if "littlebeat_osquery" in [tags] {
        if [log_type] == "result" {
			if [columns] {
				ruby { 
					code => "
						not_empty = 0
						columns = event.get('[columns]')
						columns.each do |key,value|
							if !value.to_s.empty? 
								not_empty = 1
								value = value.gsub('\\\\x', '\\ \\x')
								value = value.gsub(/\\x([\da-fA-F]{2})/) {|m| [$1].pack('H*')}
								if value.force_encoding('utf-8').valid_encoding?
									value = value.force_encoding('utf-8').encode('utf-8')									
								else
									value = value.force_encoding('windows-1251').encode('utf-8')
								end
								columns[key] = value
							end
						end
						if not_empty == 0
							event.set('[empty_flag]', 1)
						else
							event.set('[columns]', columns)
						end
					"		
				}
				if [empty_flag] { drop {} }
			}
		
		}
		if [log_type] == "status" { drop {} }
		# По техническим причинам приходится сдвигать время
		mutate {
			add_field => {"localtimestamp" => "%{@timestamp}"}
		}
		ruby {
			code => "
				event.set('localtimestamp' , event.get('@timestamp').time.strftime('%Y-%m-%d %H:%M:%S.%L'))
			"
		}
		# если вы не в Москве вам нужна другая поправка
		date {
			match => [ "created", "ISO8601" ]
			timezone => "UTC"
			target => "@timestamp"
		}
		mutate {remove_field => ["localtimestamp"]}
	}
}

output {
    if "littlebeat_osquery" in [tags]{
         
		if "debug" in [tags] {
			file { 
				codec => rubydebug
				path => "/var/log/logstash/osquery_gebug.txt"
			}
		}
		else {
			elasticsearch {
				hosts => ["http://localhost:9200"]
				index => "osquery-6.1.3-%{+YYYY.MM.dd}"
				template => "/etc/logstash/templates/osquery-6.1.3-template.json"
				template_name => "osquery-6.1.3"
				template_overwrite => true
			}
        }   
    }   
}
